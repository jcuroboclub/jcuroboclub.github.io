<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[JCU Robo Club]]></title>
  <link href="http://jcuroboclub.github.io/atom.xml" rel="self"/>
  <link href="http://jcuroboclub.github.io/"/>
  <updated>2015-05-05T12:30:21+10:00</updated>
  <id>http://jcuroboclub.github.io/</id>
  <author>
    <name><![CDATA[JCU Robo Club]]></name>
    <email><![CDATA[jcurobotics@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rowes Bay Sprint Day]]></title>
    <link href="http://jcuroboclub.github.io/blog/2015/05/05/rowes-bay-sprint-day/"/>
    <updated>2015-05-05T00:00:00+10:00</updated>
    <id>http://jcuroboclub.github.io/blog/2015/05/05/rowes-bay-sprint-day</id>
    <content type="html"><![CDATA[<p>The Rowes Bay Sensor Network Sprint will be held on the 23rd May, 9am-4pm, and will see four teams tackle separate ecosystems at the Rowes Bay Sustainability Education Centre.</p>

<p><img src="http://maps.googleapis.com/maps/api/staticmap?zoom=18&center=-19.2345%2C146.7841&maptype=satellite&markers=icon:http://jcuroboclub.github.io/images/beach12.png%7Cshadow:true%7C-19.2343%2C146.78406&markers=icon:http://jcuroboclub.github.io/images/tree164.png%7Cshadow:true%7C-19.2349%2C146.78345&markers=icon:http://jcuroboclub.github.io/images/grass.png%7Cshadow:true%7C-19.2352%2C146.7833&markers=icon:http://jcuroboclub.github.io/images/sea1.png%7Cshadow:true%7C-19.23455%2C146.7845&size=640x320&scale=2" alt=""></p>

<p>See <a href="http://jcuroboclub.github.io/tcc-sprint-day">here</a> for more information.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn to Bake: A Raspberry Pi Intro.]]></title>
    <link href="http://jcuroboclub.github.io/blog/2015/04/08/learn-to-bake-a-raspberry-pi-intro/"/>
    <updated>2015-04-08T21:43:01+10:00</updated>
    <id>http://jcuroboclub.github.io/blog/2015/04/08/learn-to-bake-a-raspberry-pi-intro</id>
    <content type="html"><![CDATA[<p>A <a href="http://www.raspberrypi.org/" title="Raspberry Pi Homepage">Raspberry Pi</a> is what&rsquo;s called a SoC, a System on a Chip. This means it is an entire computer system on a single board, about the size of a credit card.
The Raspberry Pi can run various operating systems, most of which are some form of Linux distribution. The OS we will be using is called <a href="http://www.raspbian.org/" title="Raspbian Homepage">Raspbian</a>, and is a Debian derivative.</p>

<p><img src="http://jcuroboclub.github.io/images/Raspberry_Pi_-_Model_A.jpg" alt="Raspberry Pi Model A" /></p>

<!--more-->


<p>Today&rsquo;s session will look at connecting to the Raspberry Pi using a protocol called <a href="http://en.wikipedia.org/wiki/Secure_Shell" title="SSH on Wikipedia">Secure Shell or SSH</a>, which will allow us to connect to the Raspberry Pi using a PC or Mac. We could also plug a USB keyboard and mouse directly into the Raspberry Pi, along with a monitor and use it like a regular computer, but that&rsquo;s a little harder with a full class.</p>

<p>The first thing you will have to do is download <a href="http://www.putty.org/" title="PuTTY Homepage">PuTTY</a> (if you are on Windows, otherwise on Mac and Linux you already hace the ssh command). This will allow you to SSH, or connect, to the Raspberry Pi over command-line. Using the command-line can be a little scary at first, but it is a very powerful tool, and today will be mostly about getting comfortable with it. There are plenty of average-looking guides to shell, Unix, command-line and bash out there, <a href="http://www.ee.surrey.ac.uk/Teaching/Unix/unixintro.html" title="Surrey EE Unix Intro">here</a> is one of them, <a href="http://linuxcommand.org/learning_the_shell.php" title="LinuxCommand - Learning the Shell">here</a> is another.</p>

<p>Once you have PuTTY, run it, and enter the IP address of the Raspberry Pi (hopefully I have written it on the whiteboard by now). You will be prompted for a username (pi) and a password (raspberry). Hooray! You have connected to your first Raspberry Pi.</p>

<p><img src="http://jcuroboclub.github.io/images/loginpi.png" alt="Raspberry Pi Login" /></p>

<p>Now to get familiar with some of the commands. You have logged in, and you are currently in the &ldquo;pi&rdquo; user&rsquo;s home directory. Type in <code>pwd</code> (print working directory) and hit enter to see the path of your current directory. Also try entering <code>ls</code> (list) to see the contents of the current directory. I have created a subdirectory here called <code>PiSession</code>, swap into it by typing <code>cd PiSession</code> (change directory), note that in Linux the case of you file and folder names matters! Use <code>pwd</code> to double check you are in the <code>PiSesion</code> directory. Now try creating your own folder with your name by typing <code>mkdir &lt;yourname&gt;</code> (make directory).</p>

<p>You can then swap into your own directory using <code>cd &lt;yourname&gt;</code>, and create files using <code>touch &lt;filename&gt;</code>. Try typing <code>touch info.txt</code>. You can then edit this file using a tool called <a href="http://www.nano-editor.org/" title="GNU nano editor">nano</a> <code>nano info.txt</code>. Enter some information, then hit ctrl-x to exit. You will be asked if you wish to save (y/n). If we want to swap back out of the directory we are in, we can use <code>cd ..</code> to move up one level, <code>cd ../..</code> to move up two levels, or <code>cd ../../..</code> to move up three levels, etc.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">pi@gillypi ~ <span class="nv">$ </span><span class="nb">pwd</span>
/home/pi
pi@gillypi ~ <span class="nv">$ </span>ls
Desktop    numpy-1.6.1         ocr_pi.png  Project-Mario  rtl-sdr
Documents  numpy-1.6.1.tar.gz  PiSession   python_games   Scratch
pi@gillypi ~ <span class="nv">$ </span><span class="nb">cd </span>PiSession
pi@gillypi ~/PiSession <span class="nv">$ </span><span class="nb">pwd</span>
/home/pi/PiSession
pi@gillypi ~/PiSession <span class="nv">$ </span>mkdir gilly
pi@gillypi ~/PiSession <span class="nv">$ </span>ls
gilly
pi@gillypi ~/PiSession <span class="nv">$ </span><span class="nb">cd </span>gilly
pi@gillypi ~/PiSession/gilly <span class="nv">$ </span><span class="nb">pwd</span>
/home/pi/PiSession/gilly
pi@gillypi ~/PiSession/gilly <span class="nv">$ </span><span class="nb">cd</span> ../..
pi@gillypi ~ <span class="nv">$ </span><span class="nb">pwd</span>
/home/pi
pi@gillypi ~ <span class="nv">$ </span><span class="nb">cd </span>PiSession/gilly/
pi@gillypi ~/PiSession/gilly <span class="nv">$ </span>touch info.txt
pi@gillypi ~/PiSession/gilly <span class="nv">$ </span>ls
info.txt
pi@gillypi ~/PiSession/gilly <span class="err">$</span></code></pre></div>


<p>Lets review what we have learned so far:</p>

<ul>
<li>Print the working directory <code>pwd</code></li>
<li>List the current directory&rsquo;s content <code>ls</code></li>
<li>Change into a directory <code>cd &lt;dir&gt;</code></li>
<li>Change up a directory <code>cd ..</code></li>
<li>Create an empty file <code>touch &lt;filename&gt;</code></li>
<li>Modify a file using nano <code>nano &lt;filename&gt;</code></li>
</ul>


<p>I have installed on my Raspberry Pi a program called <a href="http://www.musicpd.org/clients/mpc/" title="MPC page on MPD website">mpc</a>, Music Player Controller, which I have configured to play Triple J. Try typing <code>mpc play</code> or <code>mpc stop</code>, or even <code>mpc volume 80</code>. <em>Optional: You can find out more about mpc by typing <code>man mpc</code>, or indeed about most commands using the manual command, <code>man</code>.</em> I also have a command line Twitter program to monitor what Triple J is playing now, enter <code>t timeline</code> to see what&rsquo;s on.</p>

<p>Finally, try typing <code>python</code> to open the <a href="http://python.org/" title="Python Homepage">Python</a> <a href="http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop" title="REPL on Wikipedia">REPL</a>, which allows you to freely play with the Python language. Try typing in some maths:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">pi@gillypi ~/PiSession/gilly <span class="nv">$ </span>python
Python 2.7.3 <span class="o">(</span>default, Jan <span class="m">13</span> 2013, 11:20:46<span class="o">)</span> 
<span class="o">[</span>GCC 4.6.3<span class="o">]</span> on linux2
Type <span class="s2">&quot;help&quot;</span>, <span class="s2">&quot;copyright&quot;</span>, <span class="s2">&quot;credits&quot;</span> or <span class="s2">&quot;license&quot;</span> <span class="k">for</span> more information.
&gt;&gt;&gt; 1+1
2
&gt;&gt;&gt; print<span class="o">(</span><span class="s2">&quot;hello world&quot;</span><span class="o">)</span>
hello world
&gt;&gt;&gt; import math
&gt;&gt;&gt; math.cos<span class="o">(</span>2*math.pi<span class="o">)</span>
1.0
&gt;&gt;&gt;</code></pre></div>


<p>Now use <code>ctrl-d</code> to log out of Python. Be careful, if you hit it twice you may log out of your SSH connection.</p>

<p>We will now try to do some basic output using Python. On the Pi, this is called GPIO, General Purpose Input/Output. <em>Advanced: Because using input and output could potentially be a security issue, we need to run the commands with privileged access, the same as running as administrator in windows. We do this using the <code>sudo</code> command, meaning super-user do.</em></p>

<p>Type in <code>sudo python</code> (you may have to reenter your password).</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">RPi.GPIO</span> <span class="kn">as</span> <span class="nn">GPIO</span> <span class="c"># load the Raspberry Pi GPIO</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">setmode</span><span class="p">(</span><span class="n">GPIO</span><span class="o">.</span><span class="n">BCM</span><span class="p">)</span> <span class="c"># Set which pin naming convention to use</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span><span class="o">&lt;</span><span class="n">pin</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">OUT</span><span class="p">)</span> <span class="c"># Set &lt;pin&gt; as an output</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="o">&lt;</span><span class="n">pin</span><span class="o">&gt;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c"># Set &lt;pin&gt; high, use 0 for low</span></code></pre></div>


<p>I have connected LEDs to pins 9, 10, 22, 27, 17, 4, 3, 2 from left to right (sorry, the Pi pin numbering is funny, so so is my ordering).</p>

<p>Those wanting to go further should consider purchasing a Raspberry Pi. The units are very cheap, at $35 for a Raspberry Pi B+, or $45 for a Raspberry Pi 2. Of course, you will still need an SD card, keyboard, monitor, HDMI cable, USB micro cable, and a case, but many of these items you may already have lying around. The system itself is quite simple to learn, due to an abundance of material. Check out <a href="https://learn.adafruit.com/category/raspberry-pi" title="Learn Raspberry Pi at Adafruit">Adafruit&rsquo;s guides</a>.</p>

<p>That is about it for this session. We have seen how to connect to the Pi, how to navigate through the file system using command line, and how to run programs. These are the basic tools required to get started with the Pi. of course, if you have your own Pi, you can hook up a keyboard and monitor and connect directly. You can even connect a mouse and use a regular desktop environment. However, harnessing the power of the command-line unlocks the power of the Pi.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NQRoS]]></title>
    <link href="http://jcuroboclub.github.io/blog/2015/03/25/nqros/"/>
    <updated>2015-03-25T13:01:39+10:00</updated>
    <id>http://jcuroboclub.github.io/blog/2015/03/25/nqros</id>
    <content type="html"><![CDATA[<p>The North Queensland Robotic Sumo (NQRoS) competition is a student robotics competition aimed to foster student involvement in robotics, and intelligent systems. The competition focuses on rewarding innovation in sensing and intelligence. Held in Townsville, the competition is not limited to North Queenslanders and aims to involve entrants from across Australia and further.</p>

<!--more-->


<p>Students from across Australia will compete in a Mini-class Robotic Sumo competition, as per the official RoboGames unified sumo robot rules, using the <a href="https://www.pololu.com/category/129/zumo-robots-and-accessories">Pololu Zumo</a> robotics platform. Students may not modify the driving hardware, but are encouraged to modify their systems to be more intelligent with smart sensors.</p>

<p>Cash prizes valued at $1000, $500 and $200 will be awarded for 1st, 2nd and 3rd. The competition, hosted by James Cook University, will be held Fri May 22nd 2015 in Townsville.</p>

<h2>Rules</h2>

<h3>Eligibility</h3>

<p>Eligible competitors are:</p>

<ul>
<li>children under the age of 18,</li>
<li>current students, or</li>
<li>undergraduate/postgraduate adults not employed in the robotics industry.</li>
</ul>


<p>The definition of &ldquo;robotics industry &#8220;is deemed by the event organizers in order to keep within the spirit of the competition of non-professionals.
There may be no more than 3 entrants representing a participating organisation. Please RSVP by 22nd April to <a href="mailto:ashley.gillman@my.jcu.edu.au">Ashley Gillman</a> to enter.</p>

<h3>Competition Format</h3>

<p>The event is a robot sumo match, as defined in the RoboGames Unified Sumo Robot Rules (herein RoboGames Rules) Section 1. The event rules are consistent with those outlined in the RoboGames Rules, available <a href="http://robogames.net/rules/all-sumo.php" title="RoboGames sumo rules">here</a>.</p>

<h3>Further Requirements for Robots</h3>

<p>Robots are required to meet RoboGames Autonomous Mini Sumo Class (i.e., 10 cm x 10 cm base, unlimited height, 500 g maximum weight). One exception is made to the RoboGames Rules Section 3.3: the method of control must be fully autonomous with no human intervention (apart from starting), however control need not be contained within the robot. That is, off-board processing is allowed. In addition to requirements outlined in RoboGames Rules Section 3, a number of further requirements are placed on the robots.</p>

<p>All entry robots shall be based on the <a href="https://www.pololu.com/category/129/zumo-robot-and-accessories" title="Pololu Zumo">Pololu Zumo kit</a>. Any of the v1.0, v1.1, v1.2 or the 32U4 models are acceptable.</p>

<p>The power source may be modified, however the power source(s) must be contained within the standard Zumo battery housing. Further modifications to the Zumo are encouraged, especially the inclusion of addition sensors, servos, and computational capacity.</p>

<h3>Judging</h3>

<p>A total of three judges shall be nominated, representing:</p>

<ul>
<li>the hosting university,</li>
<li>an attending university, and</li>
<li>a competition sponsor.</li>
</ul>


<p>Of the three, one shall be nominated as chief judge, and another as the floor judge.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome]]></title>
    <link href="http://jcuroboclub.github.io/blog/2015/03/24/welcome/"/>
    <updated>2015-03-24T23:15:48+10:00</updated>
    <id>http://jcuroboclub.github.io/blog/2015/03/24/welcome</id>
    <content type="html"><![CDATA[<p>Welcome to James Cook University&rsquo;s Robo Club, run by the IEEE Student Branch.</p>

<!--more-->


<p>Watch this space for more information.</p>
]]></content>
  </entry>
  
</feed>
